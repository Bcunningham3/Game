"""
Game (Name TBD)
By: Brandon Cunningham
Version 0.1.1

Start Date: 10/12/2018
Finish Date: 10/12/2018

This version made a few changes in the back end to avoid bugs that could be caused from invalid inputs.
There were also two major features added, the first being that there is now the ability to choose the number of players,
between 2 and 4 players.
The other major feature added was the ability to change the board to any size you desire between 3 and 10 rows,
and 3 and 10 playable columns.

Game Rules:
Players will take turns choosing spots on the board where they will have the sum of all 4 tiles directly touching it
added to their score and then that score gets placed on the board.
If you choose a spot where their are no tiles with values on any direct sides of it, then the tile's score will default
to a value of 1.
You cannot choose a spot on the boarder of the board, and you can also not choose a spot already chosen.
The game will end when all tiles have been chosen.
There can be between 2 and 4 players per game.
You can choose the size of the board between 3 and 10 tiles for the rows and columns.
"""


import turtle as t
#t.speed(0)
t.tracer(0,0)
t.ht()


"""
All numbers must stick within a 20 by 40 rectangle
the starting coordinates for 1 digit number is (40,30) from left hand corner
The starting and ending position of each of these numbers will be the bottom left hand corner of their rectangles
They will all start facing the right side wall and end the same direction
"""
def num1():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.backward(10)
    t.left(90)
    t.forward(40)
    t.left(135)
    t.forward(14)
    t.up()
    t.goto(x,y)
    t.right(225)


def num2():
    x=t.xcor()
    y=t.ycor()
    t.down()
    t.forward(20)
    t.backward(20)
    t.left(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.up()
    t.left(180)
    t.goto(x,y)


def num3():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.backward(20)
    t.right(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.up()
    t.goto(x, y)
    t.left(180)


def num4():
    x = t.xcor()
    y = t.ycor()
    t.up()
    t.forward(17)
    t.left(90)
    t.down()
    t.forward(40)
    t.left(150)
    t.forward(34)
    t.left(120)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num5():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num6():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for x in range(4):
        t.forward(20)
        t.left(90)
    t.left(90)
    t.forward(40)
    t.right(90)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num7():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.goto(t.xcor()+20, t.ycor()+40)
    t.backward(20)
    t.up()
    t.goto(x, y)


def num8():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for x in range(4):
        t.forward(20)
        t.left(90)
    t.left(90)
    t.forward(20)
    t.right(90)
    for x in range(4):
        t.forward(20)
        t.left(90)
    t.up()
    t.goto(x, y)


def num9():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(40)
    for z in range(3):
        t.left(90)
        t.forward(20)
    t.up()
    t.goto(x, y)


def plus():
    x = t.xcor()
    y = t.ycor()
    t.forward(10)
    t.left(90)
    t.forward(10)
    t.down()
    t.forward(20)
    t.backward(10)
    t.right(90)
    t.backward(10)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num0():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for x in range(2):
        t.forward(20)
        t.left(90)
        t.forward(40)
        t.left(90)
    t.up()
    t.goto(x, y)


def calculate(board):
    x=True
    while x:
        (row, col) = inputs(len(board), len(board[0]))
        if board[row][col] == 0:
            num = board[row - 1][col]
            num += board[row + 1][col]
            num += board[row][col + 1]
            num += board[row][col - 1]
            x=False
        else:
            print("You can't choose a position that has already been chosen, please try again")
    """This code is for implementing the ability to 'X' out an opponents tile in future versions"""
    #elif board[row][col]==None:
    #else:
    #num=-1*board[row][col]
    if num==0:
        num=1
    board[row][col]=num
    return board, row, col


def inputs(w, h):
    """Temporary input method, will later change to graphics and mouse clicking.
    Or at least that is the plan, pygame was not working and I unfortunately
    may not be able to get it implemented in time.
    """
    row=get_row(h-2)
    col=get_col(w-2)
    return row, col


def get_row(h):
    x=True
    while x==True:
        row = input("Enter row number, between 1 and %d: " % h)
        if row.isdigit()==True:
            row=int(row)
            if row>0 and row<h+1:
                return row
        print("Invalid input, please enter an integer between 1 and %d" % h)


def get_col(w):
    x=True
    while x==True:
        col = input("Enter column number, between 1 and %d: " % w)
        if col.isdigit()==True:
            col=int(col)
            if col>0 and col<w+1:
                return col
        print("Invalid input, please enter an integer between 1 and %d" % w)


def get_width():
    x=True
    while x==True:
        width = input("Enter playable board width, between 3 and 10: ")
        if width.isdigit()==True:
            width=int(width)
            if width>2 and width<11:
                return width
        print("Invalid input, please enter an integer between 3 and 10")


def get_height():
    x = True
    while x == True:
        height = input("Enter playable board height, between 3 and 10: ")
        if height.isdigit() == True:
            height = int(height)
            if height > 2 and height < 11:
                return height
        print("Invalid input, please enter an integer between 3 and 10")


def initialize_board():
    (width)=get_width()
    height=get_height()
    w, h = width+2, height+2
    board = [[0 for x in range(h)] for y in range(w)]
    for x in range(w):
        board[x][0] = 1
        board[x][h-1] = 1
    for x in range(h):
        board[0][x] = 1
        board[w-1][x] = 1
    t.setworldcoordinates(-30, -30, (w*100)+30, (h*100)+30)
    return board


def draw_board(w, h):
    t.up()
    t.home()
    t.right(90)
    for x in range(0, w+1):
        t.goto(x*100, 0)
        t.down()
        t.backward(h*100)
        t.up()
    t.left(90)
    for x in range(0, h+1):
        t.goto(0, x * 100)
        t.down()
        t.forward(w * 100)
        t.up()
    t.home()
    corners()
    t.goto(0, (h-1)*100)
    corners()
    t.goto((w-1)*100, 0)
    corners()
    t.goto((w-1)*100, (h-1)*100)
    corners()
    t.home()


def draw_1s(w, h):
    for x in range(1, w-1):
        t.goto((x*100)+40, 30)
        num1()
        t.goto((x * 100) + 40, (h*100)-70)
        num1()
    for x in range(1, h-1):
        t.goto(40, (x*100)+30)
        num1()
        t.goto((w*100)-60, (x * 100) + 30)
        num1()
    t.update()


def corners():
    """
    Draws the black corners in the game
    """
    t.down()
    t.fillcolor('black')
    t.begin_fill()
    for x in range(4):
        t.forward(100)
        t.left(90)
    t.end_fill()
    t.up()


def draw_number(row, col, num):
    """
    Will print the score onto the drawn board
    """
    t.up()
    t.goto(row*100, col*100)
    num=str(num)
    if len(num)==1:
        one_digit(num)
    elif len(num)==2:
        two_digit(num)
    elif len(num)==3:
        three_digit(num)
    else:
        more_digit()
    t.update()


def one_digit(num):
    t.forward(40)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num)


def two_digit(num):
    t.forward(28)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num[0])
    t.forward(34)
    draw_char(num[1])


def three_digit(num):
    t.forward(16)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num[0])
    t.forward(34)
    draw_char(num[1])
    t.forward(34)
    draw_char(num[2])

def more_digit():
    t.forward(4)
    t.left(90)
    t.forward(30)
    t.right(90)
    num9()
    t.forward(34)
    num9()
    t.forward(34)
    num9()
    t.forward(34)
    plus()


def draw_char(char):
    if char == '1':
        num1()
    elif char == '2':
        num2()
    elif char == '3':
        num3()
    elif char == '4':
        num4()
    elif char == '5':
        num5()
    elif char == '6':
        num6()
    elif char == '7':
        num7()
    elif char == '8':
        num8()
    elif char == '9':
        num9()
    else:
        num0()


def player_num():
    x = True
    while x == True:
        numP = input("Enter number of players, between 2 and 4: ")
        if numP.isdigit() == True:
            numP = int(numP)
            if numP > 1 and numP < 5:
                return numP
        print("Invalid input, please enter an integer between 2 and 4")


def get_input():
    """
    Future ability to be able to click on the screen instead of having to type in
    the spots you choose to play in.
    """
    pass
    #return row, col


def checker(board):
    for x in range(len(board)-1):
        for y in range(len(board[0])-1):
            if board[x+1][y+1]==0:
                return True
    return False


def print_scores(scores, numP):
    print("Player 1's Score: " + str(scores[0]) + "\nPlayer 2's Score: " + str(scores[1]))
    if numP>=3:
        print("Player 3's Score: " + str(scores[2]))
    if numP==4:
        print("Player 4's Score: " + str(scores[3]))



def end(scores, numP):
    print_scores(scores, numP)
    if numP==2 and scores[0]==scores[1]:
        print("It's a Tie")
    if scores[0] > scores[1]:
        p1='Player 1'
        val1=scores[0]
    else:
        p1='Player 2'
        val1=scores[1]
    if scores[2] > scores[3]:
        p2='Player 3'
        val2=scores[2]
    else:
        p2='Player 4'
        val2=scores[3]
    if val1>val2:
        print(p1 + " Wins!!!")
    elif val2>val1:
        print(p2 + " Wins!!!")
    else:
        print("It's a Tie")


def main():
    turn=0
    scores = [0, 0, 0, 0]
    print("Check beginning of source code for game rules.")
    numP = player_num()
    (board) = initialize_board()
    draw_board(len(board), len(board[0]))
    draw_1s(len(board), len(board[0]))
    while checker(board):
        if turn%numP==0:
            print("Player 1's Turn")
            t.pencolor('red')
        elif turn%numP==1:
            print("Player 2's turn")
            t.pencolor('blue')
        elif turn%numP==2:
            print("Player 3's Turn")
            t.pencolor('green')
        else:
            print("Player 4's Turn")
            t.pencolor('purple')
        (board, row, col) =calculate(board)
        scores[turn%numP]+=board[row][col]
        draw_number(row, col, board[row][col])
        turn+=1
        if turn % numP == 0:
            print_scores(scores, numP)
    end(scores, numP)
    t.done()


main()
exit()
