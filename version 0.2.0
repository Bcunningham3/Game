"""
Game (Name TBD)
By: Brandon Cunningham
Version 0.1.2

Start Date: 10/12/2018
Finish Date: 10/14/2018

This version added 2 new game modes with the introduction of power ups which allows for the game mode of power ups on,
which makes a board with about 20% of the tiles being power up tiles which can randomly do something either good, or bad
but mostly good. But also mayhem mode was introduced where every tile is a power up tile, and the game is pretty chaotic 
as the name would suggest. Also a few minor bug fixes which should not have effected almost any games, but technically
were bugs.

Game Rules:
Players will take turns choosing spots on the board where they will have the sum of all 4 tiles directly touching it
added to their score and then that score gets placed on the board.
If you choose a spot where their are no tiles with values on any direct sides of it, then the tile's score will default
to a value of 1.
You cannot choose a spot on the boarder of the board, and you can also not choose a spot already chosen.
The game will end when all tiles have been chosen.
There can be between 2 and 4 players per game.
You can choose the size of the board between 3 and 10 tiles for the rows and columns.
"""


import turtle as t
import random as r
#t.speed(0)
t.tracer(0,0)
t.ht()


"""
All numbers must stick within a 20 by 40 rectangle
the starting coordinates for 1 digit number is (40,30) from left hand corner
The starting and ending position of each of these numbers will be the bottom left hand corner of their rectangles
They will all start facing the right side wall and end the same direction
"""
def num1():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.backward(10)
    t.left(90)
    t.forward(40)
    t.left(135)
    t.forward(14)
    t.up()
    t.goto(x,y)
    t.right(225)


def num2():
    x=t.xcor()
    y=t.ycor()
    t.down()
    t.forward(20)
    t.backward(20)
    t.left(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.up()
    t.left(180)
    t.goto(x,y)


def num3():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.backward(20)
    t.right(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.up()
    t.goto(x, y)
    t.left(180)


def num4():
    x = t.xcor()
    y = t.ycor()
    t.up()
    t.forward(17)
    t.left(90)
    t.down()
    t.forward(40)
    t.left(150)
    t.forward(34)
    t.left(120)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num5():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num6():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for z in range(4):
        t.forward(20)
        t.left(90)
    t.left(90)
    t.forward(40)
    t.right(90)
    t.forward(20)
    t.up()
    t.goto(x, y)


def num7():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.goto(t.xcor()+20, t.ycor()+40)
    t.backward(20)
    t.up()
    t.goto(x, y)


def num8():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for z in range(4):
        t.forward(20)
        t.left(90)
    t.left(90)
    t.forward(20)
    t.right(90)
    for z in range(4):
        t.forward(20)
        t.left(90)
    t.up()
    t.goto(x, y)


def num9():
    x = t.xcor()
    y = t.ycor()
    t.down()
    t.forward(20)
    t.left(90)
    t.forward(40)
    for z in range(3):
        t.left(90)
        t.forward(20)
    t.up()
    t.goto(x, y)


def num0():
    x = t.xcor()
    y = t.ycor()
    t.down()
    for z in range(2):
        t.forward(20)
        t.left(90)
        t.forward(40)
        t.left(90)
    t.up()
    t.goto(x, y)


def minus():
    x = t.xcor()
    y = t.ycor()
    t.goto(x, y+20)
    t.down()
    t.forward(20)
    t.up()
    t.goto(x, y)


def plus():
    x = t.xcor()
    y = t.ycor()
    t.forward(10)
    t.left(90)
    t.forward(10)
    t.down()
    t.forward(20)
    t.backward(10)
    t.right(90)
    t.backward(10)
    t.forward(20)
    t.up()
    t.goto(x, y)


def star():
    t.pencolor("black")
    x = t.xcor()
    y = t.ycor()
    t.forward(10)
    t.left(90)
    t.forward(10)
    t.down()
    t.forward(20)
    t.backward(10)
    t.right(90)
    t.backward(10)
    t.forward(20)
    t.backward(10)
    t.left(45)
    t.forward(10)
    t.backward(20)
    t.forward(10)
    t.left(90)
    t.forward(10)
    t.backward(20)
    t.forward(10)
    t.left(135)
    t.left(90)
    t.up()
    t.goto(x, y)


def draw_X():
    x = t.xcor()
    y = t.ycor()
    t.pencolor("black")
    t.forward(15)
    t.down()
    t.fillcolor("black")
    t.begin_fill()
    t.forward(5)
    t.goto(x+5, y+40)
    t.backward(5)
    t.goto(x+15, y)
    t.end_fill()
    t.up()
    t.backward(15)
    t.down()
    t.begin_fill()
    t.forward(5)
    t.goto(t.xcor()+15, t.ycor()+40)
    t.backward(5)
    t.goto(x,y)
    t.end_fill()
    t.up()


def calculate(board, numP, scores, neg, player, p_spots, negate):
    x=True
    n=0
    power_up=False
    TIMS=False
    while x:
        (row, col) = inputs(len(board), len(board[0]), player)
        spot = board[row][col]
        if spot == '$' or spot == '$-':
            if negate[player-1] > 0:
                TIMS=True
            (num)=adder(board, row, col)
            p_spots[player-1].append((row,col))
            if num == 0:
                num = 1
            if neg > 0:
                num *= -1
            if TIMS:
                num*=-1
                negate[player-1]-=1
            if spot == '$-':
                print("Trap Hit!")
                num=int(num*(-1.5))
            x = False
        elif spot == '*' or spot == '*-':
            A = board[row - 1][col]
            B = board[row + 1][col]
            C = board[row][col + 1]
            D = board[row][col - 1]
            if (A == '$' or A == '*') and (B == '$' or B == '*') and (C == '$' or C == '*') and (D == '$' or D == '*'):
                print("There must be a pre-chosen tile next to a power up in order to choose it.\nPlease try again.")
            else:
                num = adder(board, row, col)
                p_spots[player - 1].append((row, col))
                if negate[player - 1] > 0:
                    TIMS = True
                (num, scores, n, power_up, negate) = rand_power_up(num, numP, scores, board, player, negate)
                if neg > 0:
                    num *= -1
                if TIMS:
                    num *= -1
                    negate[player - 1] -= 1
                if spot == '*-':
                    print("Trap Hit!")
                    num = int(num * (-1.5))
                if power_up=="Twice Opp":
                    scores = twiceOpponent(num, numP, scores, player)
                    num = 0
                t.up()
                t.goto(row*100, col*100)
                fill_spot("white")
                x = False
        elif spot == 'X':
            print("You cannot choose a spot that has already been 'X'ed out.")
        else:
            print("You can't choose a position that has a value, please try again.")
    if n > 0 and neg > 0:
        neg += n - 1
    else:
        neg += n
    board[row][col] = num
    return board, row, col, scores, neg, p_spots, power_up


def adder(board, row, col):
    x = board[row - 1][col]
    if x == '*' or x == '$' or x == 'X':
        num=0
    else:
        num=x
    x = board[row + 1][col]
    if x != '*' and x != '$' and x != 'X':
        num+=x
    x = board[row][col + 1]
    if x != '*' and x != '$' and x != 'X':
        num+=x
    x = board[row][col - 1]
    if x != '*' and x != '$' and x != 'X':
        num+=x
    return num


def rand_power_up(num, numP, scores, board, player, negate):
    x=r.randint(1, 10)
    x=11
    power_up = ""
    neg=0
    if x==1:
        print("Scored Turned Negative")
        num*=-1
    elif x==2:
        print("10 subtracted from Score")
        num-=10
    elif x == 3:
        power_up="Twice Opp"
    elif x == 4:
        print("10 added to Score")
        num+=10
    elif x == 5:
        print("Score Multiplied by 2")
        num*=2
    elif x == 6:
        power_up = 'Choose X'
    elif x == 7:
        neg=negOpponents(numP)
    elif x == 8:
        power_up = 'Random X'
    elif x == 9:
        trap(board, player)
    elif x == 10:
        print("Your next turn will be negated")
        negate[player-1]+=1
    elif x == 11:
        power_up = 'Swap'
        """
        Ideas: 
        All implimented
        """
    return num, scores, neg, power_up, negate


def trap(board, player):
    x = True
    print("Pick a spot to place a trap")
    while x:
        (row, col) = inputs(len(board), len(board[0]), player)
        if board[row][col] == '$':
            board[row][col] = '$-'
            x = False
        elif board[row][col] == '*':
            board[row][col] = '*-'
            x = False
        elif board[row][col] == 'X':
            print("You cannot choose a spot that has already been 'X'ed out.")
        elif board[row][col] == '*-' or board[row][col] == '$-':
            x = False
        else:
            print("You can't choose a position that has already been chosen, please try again.")


def Xout(board, scores, p_spots, player):
    print("Chose a spot that will be 'X'ed out")
    boo=True
    while boo:
        row=get_row(len(board)-2, player)
        col=get_col(len(board[0])-2, player)
        if board[row][col] != 'X':
            boo=False
            Xing(board, row, col, p_spots, scores)
        else:
            print("You cannot pick a spot that has already been 'X'ed out")


def Xing(board, row, col, p_spots, scores):
    if (row, col) in p_spots[0]:
        scores[0]-=board[row][col]
    elif (row, col) in p_spots[1]:
        scores[1]-=board[row][col]
    elif (row, col) in p_spots[2]:
        scores[2]-=board[row][col]
    elif (row, col) in p_spots[3]:
        scores[3]-=board[row][col]
    board[row][col]='X'
    display_X(row, col)


def RandX(board, scores, p_spots, player):
    x=int((len(board[0])-2)*(len(board)-2)*.2)
    if x==1:
        x=2
    x=power_up_spots(board, x)
    num=int(t.numinput("Player %d" % player, "Enter number of 'X's to be randomly placed on board, between 1 and %d: " % x, 1, 1, x))
    while num > 0:
        row = r.randint(1, len(board) - 2)
        col = r.randint(1, len(board[0]) - 2)
        if board[row][col] != 'X':
            Xing(board, row, col, p_spots, scores)
            num -= 1


def swap(board, p_spots, scores, player):
    print("Choose two spots on the board to swap Values\nChoose first spot")
    row1 = get_row(len(board) - 2, player)
    col1 = get_col(len(board[0]) - 2, player)
    print("Choose second spot")
    row2 = get_row(len(board) - 2, player)
    col2 = get_col(len(board[0]) - 2, player)
    (val1, p1) = get_val(p_spots, board, scores, row1, col1)
    (val2, p2) = get_val(p_spots, board, scores, row2, col2)
    t.up()
    board[row1][col1] = val2
    board[row2][col2] = val1
    try:
        scores[p1] += val2
    except TypeError:
        pass
    try:
        scores[p2] += val1
    except TypeError:
        pass
    if p1 > -1 and p2 == -1:
        p_spots[p1].remove((row1, col1))
    if p2 > -1 and p1 == -1:
        p_spots[p2].remove((row2, col2))
    draw_swapped(val2, p1, row1, col1)
    draw_swapped(val1, p2, row2, col2)
    return board, scores, p_spots


def draw_swapped(val, p, row, col):
    t.goto(row * 100, col * 100)
    fill_spot("white")
    if val != '$':
        if p==-1:
            t.pencolor("black")
        elif p==0:
            t.pencolor("red")
        elif p==1:
            t.pencolor("blue")
        elif p==2:
            t.pencolor("green")
        elif p==3:
            t.pencolor("purple")
        draw_number(row, col, val)


def get_val(p_spots, board, scores, row1, col1):
    p=-1
    if (row1, col1) in p_spots[0]:
        p=0
        try:
            scores[0] -= board[row1][col1]
        except TypeError:
            pass
    elif (row1, col1) in p_spots[1]:
        p=1
        try:
            scores[1] -= board[row1][col1]
        except TypeError:
            pass
    elif (row1, col1) in p_spots[2]:
        p=2
        try:
            scores[2] -= board[row1][col1]
        except TypeError:
            pass
    elif (row1, col1) in p_spots[3]:
        p=3
        try:
            scores[3] -= board[row1][col1]
        except TypeError:
            pass
    return board[row1][col1], p


def power_up_spots(board, x):
    check=0
    for y in range(1, len(board)-1):
        for z in range(1, len(board[0])-1):
            if board[y][z]!='X':
                check+=1
                if x==check:
                    return check
    return check


def display_X(row, col):
    t.up()
    t.goto(row * 100, col * 100)
    fill_spot("white")
    one_digit('X')


def negOpponents(numP):
    print("All opponents next turns will be negative")
    return numP


def twiceOpponent(num, numP, scores, p):
        player=get_player(numP, p, (num*2))
        scores[player-1]-=(num*2)
        return scores


def inputs(w, h, player):
    """
    Temporary input method, will later change to graphics and mouse clicking.
    Or at least that is the plan, pygame was not working and I unfortunately
    may not be able to get it implemented in time.
    """
    row=get_row(h-2, player)
    col=get_col(w-2, player)
    return row, col


def get_player(numP, player, num):
    return int(t.numinput("Player %d" % player, "Enter player number who will have " + str(num) + " subtracted from their score, between 1 and %d: " % numP, 1, 1, numP))


def get_row(h, player):
    return int(t.numinput("Player %d" % player, "Enter row number, between 1 and %d: " % h, 1, 1, h))


def get_col(w, player):
    return int(t.numinput("Player %d" % player, "Enter column number, between 1 and %d: " % w, 1, 1, w))


def get_width():
    return int(t.numinput("Width", "Enter playable board width, between 3 and 10: ", 5, 3, 10))


def get_height():
    return int(t.numinput("Height", "Enter playable board height, between 3 and 10: ", 5, 3, 10))


def initialize_board():
    (width)=get_width()
    height=get_height()
    w, h = width+2, height+2
    board = [['$' for x in range(h)] for y in range(w)]
    for x in range(w):
        board[x][0] = 1
        board[x][h-1] = 1
    for x in range(h):
        board[0][x] = 1
        board[w-1][x] = 1
    t.setworldcoordinates(-30, -30, (w*100)+30, (h*100)+30)
    return board


def draw_board(w, h):
    t.up()
    t.home()
    t.right(90)
    for x in range(0, w+1):
        t.goto(x*100, 0)
        t.down()
        t.backward(h*100)
        t.up()
    t.left(90)
    for x in range(0, h+1):
        t.goto(0, x * 100)
        t.down()
        t.forward(w * 100)
        t.up()
    t.home()
    fill_spot("black")
    t.goto(0, (h-1)*100)
    fill_spot("black")
    t.goto((w-1)*100, 0)
    fill_spot("black")
    t.goto((w-1)*100, (h-1)*100)
    fill_spot("black")
    t.home()


def draw_1s(w, h):
    for x in range(1, w-1):
        t.goto((x*100)+40, 30)
        num1()
        t.goto((x * 100) + 40, (h*100)-70)
        num1()
    for x in range(1, h-1):
        t.goto(40, (x*100)+30)
        num1()
        t.goto((w*100)-60, (x * 100) + 30)
        num1()
    t.goto(-100,-100)
    t.update()


def fill_spot(string):
    """
    Draws the black corners in the game, and clears spots that are being drawn over
    """
    t.down()
    t.pencolor('black')
    t.fillcolor(string)
    t.begin_fill()
    for x in range(4):
        t.forward(100)
        t.left(90)
    t.end_fill()
    t.up()


def draw_number(row, col, num):
    """
    Will print the score onto the drawn board
    """
    t.up()
    t.goto(row*100, col*100)
    try:
        if num > 999:
            num = "999+"
        if num < -999:
            num = "-999"
    except TypeError:
        pass
    num = str(num)
    if len(num) == 1:
        one_digit(num)
    elif len(num) == 2:
        two_digit(num)
    elif len(num) == 3:
        three_digit(num)
    else:
        more_digit(num)
    t.goto(-100,-100)
    t.update()


def one_digit(num):
    t.forward(40)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num)


def two_digit(num):
    t.forward(28)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num[0])
    t.forward(24)
    draw_char(num[1])


def three_digit(num):
    t.forward(16)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num[0])
    t.forward(24)
    draw_char(num[1])
    t.forward(24)
    draw_char(num[2])

def more_digit(num):
    t.forward(4)
    t.left(90)
    t.forward(30)
    t.right(90)
    draw_char(num[0])
    t.forward(24)
    draw_char(num[1])
    t.forward(24)
    draw_char(num[2])
    t.forward(24)
    draw_char(num[3])


def draw_char(char):
    if char == '*':
        star()
    elif char == '1':
        num1()
    elif char == '2':
        num2()
    elif char == '3':
        num3()
    elif char == '4':
        num4()
    elif char == '5':
        num5()
    elif char == '6':
        num6()
    elif char == '7':
        num7()
    elif char == '8':
        num8()
    elif char == '9':
        num9()
    elif char == '0':
        num0()
    elif char== '-':
        minus()
    elif char == '+':
        plus()
    elif char == 'X':
        draw_X()


def player_num():
    return int(t.numinput("Players", "Enter number of players, between 2 and 4: ", 2, 2, 4))


def get_input():
    """
    Future ability to be able to click on the screen instead of having to type in
    the spots you choose to play in.
    This may turn out to be a very future thing because I cannot get pygame working.
    """
    pass
    #return row, col


def checker(board):
    for x in range(len(board)-1):
        for y in range(len(board[0])-1):
            if board[x+1][y+1]=='$' or board[x+1][y+1]=='*':
                return True
    return False


def print_scores(scores, numP):
    print("Player 1's Score: " + str(scores[0]) + "\nPlayer 2's Score: " + str(scores[1]))
    if numP>=3:
        print("Player 3's Score: " + str(scores[2]))
    if numP==4:
        print("Player 4's Score: " + str(scores[3]))


def end(scores, numP):
    print_scores(scores, numP)
    if numP==2 and scores[0]==scores[1]:
        print("It's a Tie")
    if scores[0] > scores[1]:
        p1='Player 1'
        val1=scores[0]
    else:
        p1='Player 2'
        val1=scores[1]
    if scores[2] > scores[3]:
        p2='Player 3'
        val2=scores[2]
    else:
        p2='Player 4'
        val2=scores[3]
    if val1>val2:
        print(p1 + " Wins!!!")
    elif val2>val1:
        print(p2 + " Wins!!!")
    else:
        print("It's a Tie")


def power_ups_on():
    x=t.textinput("Game Mode", "Would you like to turn on power ups? (Enter Yes to turn them on or press enter to not)")
    return check_yes(x)


def mayhem_on():
    x = t. textinput("Game Mode", "Would you like to turn on mayhem mode? (Enter Yes to turn them on or press enter to not)")
    return check_yes(x)


def check_yes(x):
    x = x.upper()
    if x != 'YES':
        return False
    print("Turned On")
    return True


def power_init(board, boo):
    if not boo:
        spots = (len(board) - 2) * (len(board[0]) - 2)
        spots //= 7
        while spots > 0:
            row = r.randint(1, len(board) - 2)
            col = r.randint(1, len(board[0]) - 2)
            if board[row][col] != '*':
                board[row][col] = '*'
                display_power_ups(row, col)
                spots -= 1
    else:
        for row in range(1, len(board)-1):
            for col in range(1, len(board[0])-1):
                board[row][col] = '*'
                display_power_ups(row, col)
    return board


def display_power_ups(row, col):
    t.up()
    t.goto(row * 100, col * 100)
    one_digit('*')


def main():
    turn = 0
    neg = 0
    scores = [0, 0, 0, 0]
    negate=[0,0,0,0]
    p_spots = [[], [], [], []]
    print("Check beginning of source code for game rules.")
    numP = player_num()
    (board) = initialize_board()
    draw_board(len(board), len(board[0]))
    draw_1s(len(board), len(board[0]))
    if power_ups_on():
        boo = mayhem_on()
        board = power_init(board, boo)
    while checker(board):
        if turn%numP==0:
            print("Player 1's Turn")
            (board, row, col, scores, neg, p_spots, power_up) = calculate(board, numP, scores, neg, 1, p_spots, negate)
            t.pencolor('red')
        elif turn%numP==1:
            print("Player 2's turn")
            (board, row, col, scores, neg, p_spots, power_up) = calculate(board, numP, scores, neg, 2, p_spots, negate)
            t.pencolor('blue')
        elif turn%numP==2:
            print("Player 3's Turn")
            (board, row, col, scores, neg, p_spots, power_up) = calculate(board, numP, scores, neg, 3, p_spots, negate)
            t.pencolor('green')
        else:
            print("Player 4's Turn")
            (board, row, col, scores, neg, p_spots, power_up) = calculate(board, numP, scores, neg, 4, p_spots, negate)
            t.pencolor('purple')
        if neg>0:
            neg -= 1
        scores[turn % numP] += board[row][col]
        draw_number(row, col, board[row][col])
        if power_up == "":
            pass
        elif power_up=='Choose X':
            Xout(board, scores, p_spots, (turn % numP)+1)
        elif power_up == 'Random X':
            RandX(board, scores, p_spots, (turn % numP)+1)
        elif power_up == 'Swap':
            (board, scores, p_spots) = swap(board, p_spots, scores, (turn % numP)+1)
        turn += 1
        if turn % numP == 0:
            print_scores(scores, numP)
    end(scores, numP)
    t.done()


main()
exit()
